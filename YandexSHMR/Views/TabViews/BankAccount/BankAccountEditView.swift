//
//  BankAccountEditView.swift
//  YandexSHMR
//
//  Created by –ù–∏–∫–∏—Ç–∞ –ê—Ä–∞–±—á–∏–∫ on 27.06.2025.
//

import SwiftUI

struct BankAccountEditView: View {
    @State private var currency: String
    @State private var balance: Decimal
    
    @State private var showingConfirmationDialog = false
    @FocusState private var isFocused: Bool
    @Binding var isEditing: Bool
    
    var bankAccountService: BankAccountService
    
    var currencySymbol: String {
        let numberFormatter = NumberFormatter()
        numberFormatter.currencyCode = currency
        return numberFormatter.currencySymbol
    }
    
    var body: some View {
        List {
            Section {
                HStack {
                    Text("üí∞")
                        .padding(.trailing, 11)
                    Text("–ë–∞–ª–∞–Ω—Å")
                    TextField("–ë–∞–ª–∞–Ω—Å", value: $balance, format: .number)
                        .focused($isFocused)
                        .multilineTextAlignment(.trailing)
                        .keyboardType(.decimalPad)
                        .foregroundStyle(.secondary)
                }
                .onTapGesture {
                    isFocused = true
                }
            }
            
            Section {
                Button {
                    showingConfirmationDialog.toggle()
                } label: {
                    HStack {
                        Text("–í–∞–ª—é—Ç–∞")
                        Spacer()
                        Text(currencySymbol)
                            .font(.system(size: 17))
                            .foregroundStyle(.secondary)
                        Image(systemName: "chevron.right")
                            .font(.system(size: 17))
                            .foregroundColor(.secondary)
                    }
                }
                .tint(.primary)
            }
        }
        .gesture(
            DragGesture(minimumDistance: 1, coordinateSpace: .global)
            .onEnded { _ in
                isFocused = false
            }
        )
        .confirmationDialog("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", isPresented: $showingConfirmationDialog) {
            Button("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚ÇΩ") {
                currency = "RUB"
            }
            Button("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä $") {
                currency = "USD"
            }
            Button("–ï–≤—Ä–æ ‚Ç¨") {
                currency = "EUR"
            }
        } message: {
            Text("–í–∞–ª—é—Ç–∞")
                .tint(.black)
        }
        .toolbar {
            ToolbarItem {
                Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                    Task {
                        await saveChanges()
                    }
                    withAnimation {
                        isEditing.toggle()
                    }
                }
            }
        }
    }
    
    func saveChanges() async {
        do {
            try await bankAccountService.changeBankAccount(name: nil, balance: balance, currency: currency)
        } catch {
              print("Error saving changes, \(error)")
        }
    }
    
    init(bankAccountService: BankAccountService, bankAccount: BankAccount, isEditing: Binding<Bool>) {
        self.bankAccountService = bankAccountService
        self.currency = bankAccount.currency
        self.balance = bankAccount.balance
        
        _isEditing = isEditing
    }
}

#Preview {
    @Previewable @State var isEditing = false
    BankAccountEditView(bankAccountService: BankAccountService(), bankAccount: BankAccountService().account, isEditing: $isEditing)
}
